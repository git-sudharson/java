
keans number of cluster-------------------------------------------------------------------------

install.packages("factoextra")
install.packages("cluster")
library(factoextra)
library(cluster)
df=USAccDeaths
df=na.omit(df)
df=scale(df)
head(df)
fviz_nbclust(df,kmeans,method="wss")
km <- kmeans(df,center=4,nstart = 25)
km
fviz_cluster(km,data = df)


binary--------------------------------------------------------------------------------------------------------

bisearch = function(table,key){
  stopifnot(is.vector(table),is.numeric(table))
  r = length(table)
  m = ceiling(r/2L)
  if(table[m]>key){
    if(r==1L){
      return(FALSE)
    }
    bisearch(table[1L:(m-1L)],key)
  }
  else if(table[m]<key){
    if(r == 1L){
      return(FALSE)
    }
    bisearch(table[(m+1L):r],key)
  }
  else{
    return(TRUE)
  }
  }
n<-as.integer(readline(prompt = "enter n value"))
bisearch(c(1,2,3,4,5,6),n)
  
  
  import export xlsx-----------------------------------------------------------------------------------------
  #import excel
install.packages("readxl")
library(readxl)
exp1 <- read_excel("D://sudharson//exp2.xlsx")
exp1 <- read.csv("D://sudharson//exp66.csv")
View(exp1)

#export excel
install.packages("openxlsx")
library(openxlsx)
s.no <- seq(1,3,by=1)
fruits <- c("apple","mango","orange")
shop1 <-c(12,14,16)
shop2 <- c(22,15,24)
shop3 <- c(12,15,14)
shop4 <-c(66,26,33)
rate <- data.frame(fruits,shop1,shop2,shop3,shop4)
rate
write.xlsx(rate,file="D://sudharson//exp0.xlsx")
write.csv(rate,file="D://sudharson//exp66.csv")


fibonacci series--------------------------------------------------------------------------------------
nterms <- as.integer(readline(prompt="How many terms? ")) 
n1 = 0
n2 = 1
count = 2 if(nterms <= 0) {
print("Please enter a positive integer")

} else {

if(nterms == 1) {
print("Fibonacci sequence:")
print(n1)
} else {

print("Fibonacci sequence:")
print(n1)
print(n2)

while(count < nterms) {
nth = n1 + n2
print(nth)
n1 = n2 n2 = nth
count = count + 1

}

}

}



data types-----------------------------------------------------------
#Logical data type
bool1 <- TRUE print(bool1)
print(class(bool1))
bool2 <- FALSE print(bool2)
print(class(bool2))
#Numeric data type
# floating point values
weight <- 63.5 print(weight)
print(class(weight))
# Real numbers
height <- 182 print(height)
print(class(height))
#Integer datatype
integer_variable<- 186L
print(class(integer_variable))
# Complex data type
complex_value<- 3 + 2i
# print class of complex_value
 
print(class(complex_value))
complex_value


#Character data type
# Create a string variable

fruit <- "Apple"
print(class(fruit))
# Create a character variable
my_char<- 'A'
print(class(my_char))
#Raw data type
# convert character to raw

raw_variable<- charToRaw("Welcome to r program")
print(raw_variable)
print(class(raw_variable))
# convert raw to character 
char_variable<- rawToChar(raw_variable)
print(char_variable)
print(class(char_variable))
# Create a vector.
apple <- c('red','green',"yellow")
print(apple)
# Get the class of the vector.
print(class(apple))
# Create a list.
list1 <- list(c(2,5,3),21.3,sin)
# Print the list.
print(list1)
# Create a matrix.
M = matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)
# Create an array.
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)
 
# Create a vector.

apple_colors<- c('green','green','yellow','red','red','red','green')

# Create a factor object.

factor_apple<- factor(apple_colors)

# Print the factor.
print(factor_apple)
print(nlevels(factor_apple))
# Create the data frame.
BMI < - data.frame(
gender = c("Male", "Male","Female"), height = c(152, 171.5, 165),
weight = c(81,93, 78), Age = c(42,38,26)
)
print(BMI)



